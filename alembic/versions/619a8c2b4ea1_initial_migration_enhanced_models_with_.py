"""Alembic script template for Prompt Optimizer Backend.

This template is used to generate migration files.
"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "619a8c2b4ea1"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "cache_entries", sa.Column("cache_type", sa.String(length=50), nullable=True)
    )
    op.add_column("cache_entries", sa.Column("hit_count", sa.Integer(), nullable=True))
    op.add_column(
        "cache_entries",
        sa.Column("last_accessed", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "cache_entries", sa.Column("chatgpt_output_quality", sa.Float(), nullable=True)
    )
    op.add_column(
        "cache_entries",
        sa.Column("optimization_effectiveness", sa.Float(), nullable=True),
    )
    op.create_index(
        "idx_cache_hits", "cache_entries", ["hit_count", "last_accessed"], unique=False
    )
    op.create_index(
        "idx_cache_quality",
        "cache_entries",
        ["chatgpt_output_quality", "optimization_effectiveness"],
        unique=False,
    )
    op.create_index(
        "idx_cache_type_expires",
        "cache_entries",
        ["cache_type", "expires_at"],
        unique=False,
    )
    op.add_column("prompts", sa.Column("context_prompts", sa.Text(), nullable=True))
    op.add_column("prompts", sa.Column("chatgpt_output", sa.Text(), nullable=True))
    op.add_column(
        "prompts", sa.Column("chatgpt_quality_score", sa.Float(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("chatgpt_tokens_used", sa.Integer(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("chatgpt_response_time", sa.Integer(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("user_rating_optimization", sa.Integer(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("user_rating_chatgpt", sa.Integer(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("user_feedback_optimization", sa.Text(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("user_feedback_chatgpt", sa.Text(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("user_action", sa.String(length=50), nullable=True)
    )
    op.add_column("prompts", sa.Column("final_prompt_used", sa.Text(), nullable=True))
    op.add_column(
        "prompts", sa.Column("optimization_effectiveness", sa.Float(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("improvement_over_original", sa.Float(), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("optimization_method", sa.String(length=50), nullable=True)
    )
    op.add_column(
        "prompts", sa.Column("optimization_time_ms", sa.Integer(), nullable=True)
    )
    op.add_column("prompts", sa.Column("tokens_used", sa.Integer(), nullable=True))
    op.create_index(
        "idx_chatgpt_quality", "prompts", ["chatgpt_quality_score"], unique=False
    )
    op.create_index(
        "idx_effectiveness", "prompts", ["optimization_effectiveness"], unique=False
    )
    op.create_index(
        "idx_user_ratings",
        "prompts",
        ["user_rating_optimization", "user_rating_chatgpt"],
        unique=False,
    )
    # Note: SQLite doesn't support adding foreign keys via ALTER TABLE.
    # Foreign key relationship is enforced at the application level via SQLAlchemy.
    # op.create_foreign_key(None, 'prompts', 'sessions', ['session_id'], ['id'])
    op.add_column("sessions", sa.Column("total_prompts", sa.Integer(), nullable=True))
    op.add_column(
        "sessions", sa.Column("total_optimizations", sa.Integer(), nullable=True)
    )
    op.add_column(
        "sessions", sa.Column("total_chatgpt_interactions", sa.Integer(), nullable=True)
    )
    op.add_column(
        "sessions", sa.Column("average_optimization_rating", sa.Float(), nullable=True)
    )
    op.add_column(
        "sessions", sa.Column("average_chatgpt_rating", sa.Float(), nullable=True)
    )
    op.add_column(
        "sessions",
        sa.Column("last_optimization_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "last_chatgpt_interaction_at", sa.DateTime(timezone=True), nullable=True
        ),
    )
    op.add_column(
        "sessions", sa.Column("preferred_style", sa.String(length=50), nullable=True)
    )
    op.add_column(
        "sessions", sa.Column("common_feedback_patterns", sa.Text(), nullable=True)
    )
    op.create_index(
        "idx_session_active", "sessions", ["is_active", "last_accessed"], unique=False
    )
    op.create_index(
        "idx_session_analytics",
        "sessions",
        ["total_prompts", "average_optimization_rating"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_session_analytics", table_name="sessions")
    op.drop_index("idx_session_active", table_name="sessions")
    op.drop_column("sessions", "common_feedback_patterns")
    op.drop_column("sessions", "preferred_style")
    op.drop_column("sessions", "last_chatgpt_interaction_at")
    op.drop_column("sessions", "last_optimization_at")
    op.drop_column("sessions", "average_chatgpt_rating")
    op.drop_column("sessions", "average_optimization_rating")
    op.drop_column("sessions", "total_chatgpt_interactions")
    op.drop_column("sessions", "total_optimizations")
    op.drop_column("sessions", "total_prompts")
    # Note: Foreign key was not created for SQLite compatibility
    # op.drop_constraint(None, 'prompts', type_='foreignkey')
    op.drop_index("idx_user_ratings", table_name="prompts")
    op.drop_index("idx_effectiveness", table_name="prompts")
    op.drop_index("idx_chatgpt_quality", table_name="prompts")
    op.drop_column("prompts", "tokens_used")
    op.drop_column("prompts", "optimization_time_ms")
    op.drop_column("prompts", "optimization_method")
    op.drop_column("prompts", "improvement_over_original")
    op.drop_column("prompts", "optimization_effectiveness")
    op.drop_column("prompts", "final_prompt_used")
    op.drop_column("prompts", "user_action")
    op.drop_column("prompts", "user_feedback_chatgpt")
    op.drop_column("prompts", "user_feedback_optimization")
    op.drop_column("prompts", "user_rating_chatgpt")
    op.drop_column("prompts", "user_rating_optimization")
    op.drop_column("prompts", "chatgpt_response_time")
    op.drop_column("prompts", "chatgpt_tokens_used")
    op.drop_column("prompts", "chatgpt_quality_score")
    op.drop_column("prompts", "chatgpt_output")
    op.drop_column("prompts", "context_prompts")
    op.drop_index("idx_cache_type_expires", table_name="cache_entries")
    op.drop_index("idx_cache_quality", table_name="cache_entries")
    op.drop_index("idx_cache_hits", table_name="cache_entries")
    op.drop_column("cache_entries", "optimization_effectiveness")
    op.drop_column("cache_entries", "chatgpt_output_quality")
    op.drop_column("cache_entries", "last_accessed")
    op.drop_column("cache_entries", "hit_count")
    op.drop_column("cache_entries", "cache_type")
    # ### end Alembic commands ###
